" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
" if filereadable("/etc/vim/vimrc")
"   source /etc/vim/vimrc
"   echo "from vimrc in etc"
" endif

" let $MYVIMRC=$VIM"/vimrc"


source $VIMRUNTIME/vimrc_example.vim
" Windows related setups........................
source $VIMRUNTIME/mswin.vim
behave mswin
"...............................................
" source $VIM/settings/mockingmswin.vim
" source $VIM/settings/windowsonly.vim
" " Start_Original_Kyb_Here / Run_VimRC / StartUp / 
source $VIM/settings/basicSetups.vim
" " all plugin related settings
source $VIM/settings/plugins.vim
" " Appearance/General Settings /GUI Stuff /Toggle Maps <F# series>
source $VIM/settings/settings.vim
" " Movement / Search_&_Replace / Run_Executable_(cmd) / 
source $VIM/settings/keymaps.vim
" " Backup options / Folding / Find_as_a_list / 
source $VIM/settings/specificSetups.vim
" " Vim_Page_Shortcuts / Vim_Template_Shortcuts /
source $VIM/settings/pageShortcuts.vim
" " Vim_tools_Shortcuts
source $VIM/settings/toolsShortcuts.vim
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

"
"
"...................................................................
filetype plugin on
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s
autocmd! bufwritepost .vimrc sorce %
"...................................................................
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar


set diffexpr=MyDiff()
function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . ' q\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


" SeeTab: toggles between showing tabs and using standard listchars
fu! SeeTab()
    if !exists("g:SeeTabEnabled")
        let g:SeeTabEnabled = 1
        let g:SeeTab_list = &list
        let g:SeeTab_listchars = &listchars
        let regA = @a
        silent! hi SpecialKey guifg=black guibg=magenta ctermfg=black ctermbg=magenta
        set list
        set listchars=tab:\|\
    else
        let &list = g:SeeTab_list
        let &listchars = &listchars
        silent! exe "hi ".substitute(g:SeeTabSpecialKey,'xxx','','e')
        unlet g:SeeTabEnabled g:SeeTab_list g:SeeTab_listchars
    endif
endfunc
com! -nargs=0 SeeTab :call SeeTab()

if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    setglobal fileencoding=utf-8
    "setglobal bomb
    set fileencodings=ucs-bom,utf-8,latin1
endif

